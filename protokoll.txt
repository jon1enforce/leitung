Beim klick auf "verbinden" mit port 5060, ip 127.0.0.1 soll die client-server-kommunikation initial:


1) client und server tauschen die public keys unverschlüsselt aus, zuerst der client.
1.1) der client durchläuft eine Validierung, es wird geprüft ob der client im besitz des korrekten privaten schlüssels ist, ohne ihn preiszugeben!
2) der server generiert den merkle root hash aus eigenem public key und allen client public keys, 
die reihenfolge wird durch die clientID bzw. durch die Einlogreihenfolge 0,1,2,3, ..., bestimmmt.
Die keys werden also sortiert mit serverkey + client0key + cilent1key ... mit Nachrücklogik auf client- und server-seite.
3)der client empfängt den merkle hash und rechnet anhand der keys den hash erneut aus, 
der vom server und vom client berechnete hash, muss identisch sein, dann ist die integrität der public keys erfolgreich gerpüft. Diese Prüfung erfolgt vom client.
4)der server generiert ein gemeinsames geheimnis mit dem prefix '+++secret+++' für jeden client, initial und einmalig. Speichert diesen anhand der client  ID.
4.1) Das Gemeinsame Geheimnis mit prefix '+++secret+++' wird mit dem öffentlichen 4096 bit RSA Schlüssel verschlüsselt so dass nur der empfänger dieses entschlüsseln kann mit dem privaten Schlüssel.
4.2) RSA 4096 gilt als Quantensicher bis 8.192 logische Qubits (Shor-Algorithmus), praktisch  eine Milliarde QBits: Das Kosten/Nutzen fürs "knacken" ist auch in vielen Jahrzehnten viel zu groß, #workload. 
5) der server sendet das gemeinsame geheimnis, an den jeweiligen client, der client speichert dieses geheimnis als server_secret
6) anhand des server_secret, seed/iv plus key,  verschlüsselt der server das phonebook mit AES und sendet es dem jeweiligen client, 
welches dem einzigartigem geheimnis zugewiesen ist. Jeder Client wird also mit ID, Name public key und einzigartigem geheimnis (AES) gelistet.
Die Liste wird ständig erneuert, anhand des phonebook updates.
7) anschließend sendet der server mit dem jeweiligen server_secret1 server_secret2 usw., - 
das aktuelle phonebook auch an alle weiteren clients, vorausgesetzt es gibt andere clients, die bereits eingeloggt sind.
8) Die connection loop der clients und der server, läuft in einem eigenen thread ohne unterbrechung, 
und wartet auf weitere aktionen z.b. "call", als message, bzw. ordnet die message einer aktion zu, 
z.b. bei einem anruf müssen die audio chunks verschlüsselt und entschlüsselt werden mit AES, und dem beidseitig, server+client, -gespeicherten gemeinsamen Geheimnis.


Beim Anruf klick  auf "call"

1)auswahl im telefonbuch plus "call" sendet ein signal, also eine einfache nachricht an den server, verschlüsselt mir AES, und dem jeweiligen server_secret.
2) der server entschlüsselt diese nachricht und initiert einen anruf als vermittler:
2.1) server generiert ein geheimnis client0_clien1_secret und sendet sie den gesprächsteilnehmern zu, verschlüsselt mit den jeweiligen öffentlichen schlüssel mit RSA.
2.2) die beiden clients entschlüsseln dieses geheimnis für diese temporäre audioübertragung.
2.3) für die birektionale audio übertragung mit lautsprecher und mikrofon wird das geheimnis client0_clien1_secret von beiden clients verwendet für die übertragungssession.

Beim Auflegen, klick auf "hang up"

1)"hang up" beendet das gespräch und löscht das gemeinsame geheimnis, so dass jede session einen neuen schlüssel vom server verwendet. On time use.

Beim Phonebook-update klick auf "update"

1) identity challenge: Es wird geprüft ob der client im besitz des privaten schlüssels ist, ohne ihn preis - zu geben. Eine RSA challenge.
1.1) Merkle root hash wird neu berechnet. Ohne automatische Verifikation, nur als Zusatzinformation, hier. Gegebenfalls für security debugging.
2) phonebook update: Es werden alle aktiven clients an diesen client gesandt.
3. client user interface wird aktualisiert mit den aktuellen clients.

Achtung: Die Reihenfolge ist wichtig, eine verdrehte Reihenfolge in der Logik ist ein potentielles Sicherheitsrisiko und gefährdet die Integrität.
Gegebenfalls muss ein superviser diese Reihenfolge kontrollieren um die integrität sicherzustellen.
